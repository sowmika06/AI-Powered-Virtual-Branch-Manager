"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { VideoPlayer } from "@/components/video-player"
import { VideoRecorder } from "@/components/video-recorder"
import { DocumentUploader } from "@/components/document-uploader"
import { FacialVerification } from "@/components/facial-verification"
import { LoanEligibility } from "@/components/loan-eligibility"

type LoanType = "personal" | "home" | "business" | "education"

interface LoanApplicationProps {
  loanType: LoanType
}

// Define the application stages
type Stage = "intro" | "verification" | "questions" | "documents" | "eligibility" | "decision"

export function LoanApplication({ loanType }: LoanApplicationProps) {
  const [stage, setStage] = useState<Stage>("intro")
  const [progress, setProgress] = useState(0)
  const [isVideoPlaying, setIsVideoPlaying] = useState(false)
  const [isRecording, setIsRecording] = useState(false)
  const [userResponses, setUserResponses] = useState<Record<string, string>>({})
  const [documents, setDocuments] = useState<Record<string, string>>({})
  const [verificationComplete, setVerificationComplete] = useState(false)
  const [decision, setDecision] = useState<"approved" | "rejected" | "pending">("pending")

  // Update progress based on current stage
  useEffect(() => {
    const stageProgress = {
      intro: 0,
      verification: 20,
      questions: 40,
      documents: 60,
      eligibility: 80,
      decision: 100,
    }

    setProgress(stageProgress[stage])
  }, [stage])

  // Questions for the personal loan
  const questions = [
    {
      id: "purpose",
      question: "What is the purpose of your personal loan?",
      options: ["Debt Consolidation", "Home Improvement", "Major Purchase", "Medical Expenses", "Other"],
    },
    {
      id: "amount",
      question: "How much would you like to borrow?",
      options: ["₹50,000 - ₹2,00,000", "₹2,00,000 - ₹5,00,000", "₹5,00,000 - ₹10,00,000", "Above ₹10,00,000"],
    },
    {
      id: "income",
      question: "What is your monthly income?",
      options: ["Below ₹25,000", "₹25,000 - ₹50,000", "₹50,000 - ₹1,00,000", "Above ₹1,00,000"],
    },
    {
      id: "employment",
      question: "What is your employment status?",
      options: ["Salaried", "Self-employed", "Business Owner", "Retired", "Other"],
    },
  ]

  // Current question index
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)

  // Handle next stage
  const handleNextStage = () => {
    const stages: Stage[] = ["intro", "verification", "questions", "documents", "eligibility", "decision"]
    const currentIndex = stages.indexOf(stage)

    if (currentIndex < stages.length - 1) {
      setStage(stages[currentIndex + 1])
    }
  }

  // Handle question response
  const handleQuestionResponse = (response: string) => {
    const currentQuestion = questions[currentQuestionIndex]

    setUserResponses((prev) => ({
      ...prev,
      [currentQuestion.id]: response,
    }))

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1)
    } else {
      // All questions answered, move to next stage
      handleNextStage()
    }
  }

  // Handle document upload
  const handleDocumentUpload = (type: string, data: string) => {
    setDocuments((prev) => ({
      ...prev,
      [type]: data,
    }))
  }

  // Handle verification complete
  const handleVerificationComplete = () => {
    setVerificationComplete(true)
  }

  // Handle eligibility check
  const handleEligibilityCheck = () => {
    // Simple eligibility logic - can be expanded
    const income = userResponses.income
    const employment = userResponses.employment

    if (
      (income === "₹50,000 - ₹1,00,000" || income === "Above ₹1,00,000") &&
      (employment === "Salaried" || employment === "Business Owner")
    ) {
      setDecision("approved")
    } else {
      setDecision("rejected")
    }

    handleNextStage()
  }

  // Render current stage content
  const renderStageContent = () => {
    switch (stage) {
      case "intro":
        return (
          <div className="space-y-6">
            <VideoPlayer
              src="/placeholder.svg?height=400&width=600"
              onPlay={() => setIsVideoPlaying(true)}
              onEnded={() => setIsVideoPlaying(false)}
            />
            <div className="space-y-4">
              <h2 className="text-2xl font-semibold">Welcome to VidFin Personal Loan Application</h2>
              <p className="text-muted-foreground">
                I'm your AI Branch Manager. I'll guide you through the personal loan application process. First, we'll
                verify your identity, then ask a few questions about your loan requirements, and finally collect
                necessary documents to assess your eligibility.
              </p>
              <Button onClick={handleNextStage} disabled={isVideoPlaying}>
                Let's Get Started
              </Button>
            </div>
          </div>
        )

      case "verification":
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold">Identity Verification</h2>
            <p className="text-muted-foreground mb-4">
              We need to verify your identity before proceeding. Please allow camera access and follow the instructions.
            </p>
            <FacialVerification onVerificationComplete={handleVerificationComplete} />
            {verificationComplete && <Button onClick={handleNextStage}>Continue</Button>}
          </div>
        )

      case "questions":
        const currentQuestion = questions[currentQuestionIndex]

        return (
          <div className="space-y-6">
            <VideoPlayer
              src="/placeholder.svg?height=400&width=600"
              onPlay={() => setIsVideoPlaying(true)}
              onEnded={() => setIsVideoPlaying(false)}
            />
            <div className="space-y-4">
              <h2 className="text-2xl font-semibold">
                Question {currentQuestionIndex + 1} of {questions.length}
              </h2>
              <p className="text-xl">{currentQuestion.question}</p>

              <div className="space-y-2">
                {!isRecording ? (
                  <div className="space-y-4">
                    <VideoRecorder
                      onStartRecording={() => setIsRecording(true)}
                      onStopRecording={(videoBlob) => {
                        setIsRecording(false)
                        // In a real app, we would process the video response
                        // For demo, we'll just select a random option
                        const randomOption =
                          currentQuestion.options[Math.floor(Math.random() * currentQuestion.options.length)]
                        handleQuestionResponse(randomOption)
                      }}
                    />
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                      {currentQuestion.options.map((option) => (
                        <Button key={option} variant="outline" onClick={() => handleQuestionResponse(option)}>
                          {option}
                        </Button>
                      ))}
                    </div>
                  </div>
                ) : (
                  <div className="text-center p-8 bg-muted rounded-lg">
                    <p className="text-lg font-medium">Recording your response...</p>
                    <p className="text-sm text-muted-foreground mt-2">Speak clearly into your microphone</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )

      case "documents":
        return (
          <div className="space-y-6">
            <VideoPlayer
              src="/placeholder.svg?height=400&width=600"
              onPlay={() => setIsVideoPlaying(true)}
              onEnded={() => setIsVideoPlaying(false)}
            />
            <div className="space-y-4">
              <h2 className="text-2xl font-semibold">Document Submission</h2>
              <p className="text-muted-foreground">
                Please upload the following documents. You can take a photo or upload an existing file.
              </p>

              <div className="space-y-4">
                <DocumentUploader
                  documentType="aadhaar"
                  label="Aadhaar Card"
                  onUpload={(data) => handleDocumentUpload("aadhaar", data)}
                  isUploaded={!!documents.aadhaar}
                />

                <DocumentUploader
                  documentType="pan"
                  label="PAN Card"
                  onUpload={(data) => handleDocumentUpload("pan", data)}
                  isUploaded={!!documents.pan}
                />

                <DocumentUploader
                  documentType="income"
                  label="Income Proof (Salary Slip/Bank Statement)"
                  onUpload={(data) => handleDocumentUpload("income", data)}
                  isUploaded={!!documents.income}
                />
              </div>

              <Button onClick={handleNextStage} disabled={!documents.aadhaar || !documents.pan || !documents.income}>
                Submit Documents
              </Button>
            </div>
          </div>
        )

      case "eligibility":
        return (
          <div className="space-y-6">
            <VideoPlayer
              src="/placeholder.svg?height=400&width=600"
              onPlay={() => setIsVideoPlaying(true)}
              onEnded={() => setIsVideoPlaying(false)}
            />
            <div className="space-y-4">
              <h2 className="text-2xl font-semibold">Loan Eligibility Check</h2>
              <p className="text-muted-foreground">
                We're now checking your eligibility based on the information and documents you've provided.
              </p>

              <LoanEligibility
                userResponses={userResponses}
                documents={documents}
                onEligibilityCheck={handleEligibilityCheck}
              />
            </div>
          </div>
        )

      case "decision":
        return (
          <div className="space-y-6">
            <VideoPlayer
              src="/placeholder.svg?height=400&width=600"
              onPlay={() => setIsVideoPlaying(true)}
              onEnded={() => setIsVideoPlaying(false)}
            />
            <div className="space-y-4">
              <h2 className="text-2xl font-semibold">Loan Decision</h2>

              {decision === "approved" && (
                <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center">
                  <div className="flex items-center justify-center w-16 h-16 mx-auto bg-green-100 rounded-full">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="h-8 w-8 text-green-600"
                    >
                      <path d="M20 6 9 17l-5-5" />
                    </svg>
                  </div>
                  <h3 className="mt-4 text-xl font-semibold text-green-800">Congratulations!</h3>
                  <p className="mt-2 text-green-700">
                    Your personal loan application has been approved. We'll contact you shortly with the next steps.
                  </p>
                </div>
              )}

              {decision === "rejected" && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                  <div className="flex items-center justify-center w-16 h-16 mx-auto bg-red-100 rounded-full">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="h-8 w-8 text-red-600"
                    >
                      <path d="M18 6 6 18" />
                      <path d="m6 6 12 12" />
                    </svg>
                  </div>
                  <h3 className="mt-4 text-xl font-semibold text-red-800">We're Sorry</h3>
                  <p className="mt-2 text-red-700">
                    Your personal loan application has been declined at this time. You can try again after 3 months.
                  </p>
                </div>
              )}

              <Button onClick={() => (window.location.href = "/")}>Return to Home</Button>
            </div>
          </div>
        )
    }
  }

  return (
    <div className="space-y-6">
      <div className="space-y-2">
        <div className="flex justify-between items-center">
          <span className="text-sm font-medium">Application Progress</span>
          <span className="text-sm text-muted-foreground">{progress}%</span>
        </div>
        <Progress value={progress} className="h-2" />
      </div>

      <Card>
        <CardContent className="p-6">{renderStageContent()}</CardContent>
      </Card>
    </div>
  )
}

